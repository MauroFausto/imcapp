/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package maurofausto.br.edu.fatecjahu.imc.view;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import javax.swing.Action;
import maurofausto.br.edu.fatecjahu.imc.model.Imc;

/**
 *
 * @author Mauro Fausto
 */
public class FrmImc extends javax.swing.JFrame {

    /**
     * Creates new form FrmImc
     */
    public FrmImc() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTitulo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        pnlCampos = new javax.swing.JPanel();
        lblAltura = new javax.swing.JLabel();
        txtAltura = new javax.swing.JTextField();
        lblPeso = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        lblImc = new javax.swing.JLabel();
        txtImc = new javax.swing.JLabel();
        BtnCalcular = new javax.swing.JButton();
        lblTabelaIMC = new javax.swing.JLabel();
        lblImagemImc = new javax.swing.JLabel();
        pnlResultado = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblResultado = new javax.swing.JLabel();
        pnlRecomendacao = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblRecomendacao = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlTitulo.setBackground(new java.awt.Color(0, 153, 51));

        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 0));
        lblTitulo.setText("Cálculo do IMC – Índice de Massa Corporal");

        javax.swing.GroupLayout pnlTituloLayout = new javax.swing.GroupLayout(pnlTitulo);
        pnlTitulo.setLayout(pnlTituloLayout);
        pnlTituloLayout.setHorizontalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTituloLayout.setVerticalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitulo)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        lblAltura.setText("Altura:");

        lblPeso.setText("Peso:");

        lblImc.setText("IMC:");

        txtImc.setBackground(new java.awt.Color(0, 255, 0));
        txtImc.setOpaque(true);

        BtnCalcular.setText("Calcular");
        BtnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCalcularActionPerformed(evt);
            }
        });
        
        lblImagemImc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/maurofausto/br/edu/fatecjahu/imc/res/TabelaIMC.png"))); // NOI18N

        javax.swing.GroupLayout pnlCamposLayout = new javax.swing.GroupLayout(pnlCampos);
        pnlCampos.setLayout(pnlCamposLayout);
        pnlCamposLayout.setHorizontalGroup(
            pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCamposLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(pnlCamposLayout.createSequentialGroup()
                            .addComponent(lblPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtPeso))
                        .addGroup(pnlCamposLayout.createSequentialGroup()
                            .addComponent(lblImc, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtImc, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlCamposLayout.createSequentialGroup()
                            .addComponent(lblAltura, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtAltura, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(BtnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(lblImagemImc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTabelaIMC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCamposLayout.setVerticalGroup(
            pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCamposLayout.createSequentialGroup()
                .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCamposLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblImagemImc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlCamposLayout.createSequentialGroup()
                                .addComponent(lblTabelaIMC)
                                .addGap(136, 136, 136))))
                    .addGroup(pnlCamposLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAltura)
                            .addComponent(txtAltura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPeso)
                            .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblImc)
                            .addComponent(txtImc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(BtnCalcular)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Resultado da Classificação:");

        lblResultado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout pnlResultadoLayout = new javax.swing.GroupLayout(pnlResultado);
        pnlResultado.setLayout(pnlResultadoLayout);
        pnlResultadoLayout.setHorizontalGroup(
            pnlResultadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultadoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(461, Short.MAX_VALUE))
            .addGroup(pnlResultadoLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlResultadoLayout.setVerticalGroup(
            pnlResultadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultadoLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblResultado, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Recomendação:");

        lblRecomendacao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout pnlRecomendacaoLayout = new javax.swing.GroupLayout(pnlRecomendacao);
        pnlRecomendacao.setLayout(pnlRecomendacaoLayout);
        pnlRecomendacaoLayout.setHorizontalGroup(
            pnlRecomendacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRecomendacaoLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblRecomendacao, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlRecomendacaoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRecomendacaoLayout.setVerticalGroup(
            pnlRecomendacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRecomendacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRecomendacao, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlRecomendacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlRecomendacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCalcularActionPerformed
        Imc imc = new Imc();
        
        imc.altura = this.tryConvertToFloat(txtAltura.getText());
        imc.peso = this.tryConvertToFloat(txtPeso.getText());
        
        String resultado = this.calcularResultado(imc);
        lblResultado.setText(resultado);        
                
        String recomendacao = this.calcularRecomendacao(imc.imc);
        lblRecomendacao.setText(recomendacao);        
    }//GEN-LAST:event_BtnCalcularActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmImc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmImc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmImc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmImc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmImc().setVisible(true);
            }
        });
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCalcular;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAltura;
    private javax.swing.JLabel lblImagemImc;
    private javax.swing.JLabel lblImc;
    private javax.swing.JLabel lblPeso;
    private javax.swing.JLabel lblRecomendacao;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JLabel lblTabelaIMC;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlCampos;
    private javax.swing.JPanel pnlRecomendacao;
    private javax.swing.JPanel pnlResultado;
    private javax.swing.JPanel pnlTitulo;
    private javax.swing.JTextField txtAltura;
    private javax.swing.JLabel txtImc;
    private javax.swing.JTextField txtPeso;
    // End of variables declaration//GEN-END:variables
    
    
    public String calcularResultado(Imc imc){
        String resultado = "";
        
        //Cálculo
        imc.imc = imc.calcularImc(imc.altura, imc.peso);
        imc.imc = imc.imc * 10000;
        
        Double truncatedImc = BigDecimal.valueOf(imc.imc)
                .setScale(2, RoundingMode.HALF_UP).doubleValue();
        
        imc.imc = truncatedImc;
        
        String imcString = Double.toString(imc.imc);

        if (imc.imc < 19 ) {
            txtImc.setText(imcString);
            resultado = "O seu resultado de IMC é : " + imcString + ", "
                    + "portanto você está na faixa:\n Abaixo do Peso";
            // Cor do texto(fonte) do Label.
            lblResultado.setBackground(new Color(183, 205, 38));
            lblResultado.setForeground(Color.black);
            // Cor de fundo (background)
            //lblResultado.setBackground(new Color(x, y, z));
            lblResultado.setOpaque(true);
            
            this.calcularRecomendacao(imc.imc);
            
            return resultado;
        }
        else if (imc.imc > 19.1 && imc.imc < 24.9 ) {
            txtImc.setText(imcString);
            resultado = "O seu resultado de IMC é : " + imcString + ", "
                    + "portanto você está na faixa:\n Peso Normal";
            
            lblResultado.setBackground(new Color(243, 183, 3));
            lblResultado.setForeground(Color.black);
            lblResultado.setOpaque(true);
            
            this.calcularRecomendacao(imc.imc);
            return resultado;
        } else if (imc.imc > 25 && imc.imc < 29.9 ) {
            txtImc.setText(imcString);
            resultado = "O seu resultado de IMC é : " + imcString + ", "
                    + "portanto você está na faixa:\n Sobrepeso";
            
            lblResultado.setBackground(new Color(243, 146, 12));
            lblResultado.setForeground(Color.black);
            lblResultado.setOpaque(true);
            
            this.calcularRecomendacao(imc.imc);
            return resultado;
        } else if (imc.imc > 30 && imc.imc < 34.9 ) {
            txtImc.setText(imcString);
            resultado = "O seu resultado de IMC é : " + imcString + ", "
                    + "portanto você está na faixa:\n Obesidade Grau I";
            
            lblResultado.setBackground(new Color(236, 88, 29));
            lblResultado.setForeground(Color.black);
            lblResultado.setOpaque(true);
            
            this.calcularRecomendacao(imc.imc);
            return resultado;
        } else if (imc.imc > 35 && imc.imc < 39.9 ) {
            txtImc.setText(imcString);
            resultado = "O seu resultado de IMC é : " + imcString + ", "
                    + "portanto você está na faixa:\n Obesidade Grau II";
            
            lblResultado.setBackground(new Color(233, 28, 29));
            lblResultado.setForeground(Color.black);
            lblResultado.setOpaque(true);
            
            this.calcularRecomendacao(imc.imc);
            
            return resultado;
        } else if (imc.imc >= 40) {
            txtImc.setText(imcString);
            resultado = "O seu resultado de IMC é : " + imcString + ", "
                    + "portanto você está na faixa:\n Obesidade Grau III "
                    + "- Mórbida";
            
            lblResultado.setBackground(new Color(198, 24, 28));
            lblResultado.setForeground(Color.black);
            lblResultado.setOpaque(true);
            
            this.calcularRecomendacao(imc.imc);
            return resultado;
        }        
            
        return resultado;
    }
    
    public String calcularRecomendacao(double imc) {
        if (imc < 25) {
            lblRecomendacao.setBackground(Color.green);
            lblRecomendacao.setForeground(Color.white);
            lblRecomendacao.setOpaque(true);
            return "Não precisa fazer regime.";
        }            
        else {
            lblRecomendacao.setBackground(Color.green);
            lblRecomendacao.setForeground(Color.white);
            lblRecomendacao.setOpaque(true);
            return "Sim, é necessário fazer regime.";
        }
    }
    
    public float tryConvertToFloat(String value) {
        try {
            if (value.isBlank() || value.isEmpty()) {
                // Deverá lançar uma exceção do tipo NullException.
                Float returnValue = Float.parseFloat(value);
                return returnValue;
            }
            // Caso o valor não for vazio ou nulo, irá converter e retornar o
            // valor da conversão em no tipo float para ser calculado o IMC.
            // O código é o mesmo...
            else {
                Float returnConvertedValue = Float.parseFloat(value);
                return returnConvertedValue;
            }
        }
        catch (NumberFormatException ex) {
            System.out.println(ex.getMessage());
            return 0f;
        }
    }
}
